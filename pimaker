#! /usr/bin/env bash

source config.env

function get_image_size {
  if [ -n "$TARGET_DEVICE" ]; then
    echo $(sudo fdisk -x $TARGET_DEVICE | grep $TARGET_DEVICE: | grep -oE "[0-9]+[[:space:]]bytes" | grep -oE [0-9]+)B ;
  else
    echo $IMAGE_SIZE
  fi
}

case $1 in
  all)
    IMAGE_SIZE=$(get_image_size)
    sudo -E bash -c "\
      sudo -u $USER $0 download && \
      $0 edit-offline && \
      sudo -u $USER $0 img2qemu && \
      sudo -u $USER $0 run && \
      sudo -u $USER $0 ansible && \
      sudo -u $USER $0 qemu2img && \
      $0 img2device"
    ;;
  download)
    ./scripts/download.sh ;;

  edit-offline)
    sudo -E ./scripts/edit-image.sh ;;

  img2qemu)
    IMAGE_SIZE=$(get_image_size)
    ./scripts/img2qemu.sh ;;

  run)
    ./scripts/emulate-run.sh ;;

  ansible)
    for play in ${ANSIBLE_PLAYS[@]}; do
      ansible-playbook -i inventory -e "ansible_ssh_port=$QEMU_SSH_PORT" --private-key ${SSH_PUBKEY%.*} -u $IMAGE_USER $play;
    done ;;

  qemu2img)
    ./scripts/qemu2img.sh ;;

  img2device)
    sudo -E ./scripts/img2device.sh ;;

  clean)
    sudo bash -c 'umount mnt || true; \
      rm -rf qemu.pid *.zip *.torrent *.qcow2 *.aria2 kernel/ mnt/' ;;

  *)
    echo $0 '[option]
      - all: perform all the below actions except clean. Downloads the media and creates the final sd image.
      - download: Downloads the base image, qemu kernel
      - edit-offline: Mounts the .img and performs offline updates to the OS
      - img2qemu: converts the .img to a qemu image
      - run: boots the qemu image on qemu for online customizations
      - ansible: runs predefined ansible playbooks on the qemu booted image
      - qemu2img: converts the qemu image back to a .img file
      - img2device: writes the created image file onto the sdcard or other device
      - clean: remove all generated files and folders' ;;

esac
